//SQL---Resource W3Schools
SQL means Structured query Language.
SQL is a standard language for accessing and manipulating databases.
SQL is language used to communicate with the Database.
SQl is used to insert,update,remove the data in Database
Database is a collection of Table.
Tables contain rows and colums, each row called record.
Database is collection of data or information.
Oracle, Microsoft Access, Mysql, SQL Server are the various databases.
SQL keywords are NOT case sensitive: select is the same as SELECT
Each statement is seperated by a semicolon in SQL
*Every individual cell is called field which have infromation about record.
*Record is horizontal entity which have field. Table have records
*Column is a vertical entity of Table which have information.

//Using SQL in Your Web Site
To build a web site that shows data from a database, you will need:
*An RDBMS database program (i.e. MS Access, SQL Server, MySQL)
*To use a server-side scripting language, like PHP or ASP
*To use SQL to get the data you want
*To use HTML / CSS to style the page

//RDBMS
*RDBMS stands for Relational Database Management System.
*RDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.
*The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.

//Some of the important commands of SQL
SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index

//Selects all the records from Customers table
Eg: SELECT * FROM Customers;
Eg: SELECT CustomerName, City FROM Customers;--to select individual fields from table
*The data returned is stored in a result table, called the result-set.

//The SQL SELECT DISTINCT Statement
*The SELECT DISTINCT statement is used to return only distinct (different) values.
Eg: SELECT DISTINCT column1, column2, ...
FROM table_name;
*SELECT COUNT(DISTINCT Country) FROM Customers;--to count distint coulmn fields and this cannot work in Microsoft Acess databases(Ex. firefox)

//The SQL WHERE Clause
*The WHERE clause is used to filter records.
*It is used to extract only those records that fulfill a specified condition.
*The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.
*In where statement text assigned in Quotes and number is in normal.
Eg: SELECT * FROM Customers WHERE Country='Mexico';

//The SQL AND, OR and NOT Operators
*The WHERE clause can be combined with AND, OR, and NOT operators.
*AND displays record if both the conditions are true
*OR displays record if one of the condition is true
*NOT displays record if the condition is false
Eg: SELECT column1, column2, ... FROM table_name WHERE condition1 AND condition2 AND condition3 ...;
                                                 WHERE condition1 OR condition2 OR condition3 ...;
                                                 WHERE NOT condition;

Eg2: SELECT * FROM Customers WHERE Country='Germany' AND City='Berlin';
    SELECT * FROM Customers WHERE City='Berlin' OR City='München';
    SELECT * FROM Customers WHERE NOT Country='Germany';
    SELECT * FROM Customers WHERE Country='Germany' AND (City='Berlin' OR City='München');
    SELECT * FROM Customers WHERE NOT Country='Germany' AND NOT Country='USA';

//Operators in SQL
Operator	Description	Example
=	Equal	
>	Greater than	
<	Less than	
>=	Greater than or equal	
<=	Less than or equal	
<>	Not equal. Note: In some versions of SQL this operator may be written as !=	
BETWEEN	Between a certain range	
LIKE	Search for a pattern	
IN	To specify multiple possible values for a column

//The SQL ORDER BY Keyword
*The ORDER BY keyword is used to sort the result-set in ascending or descending order.
*The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.
Eg: SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;
    SELECT * FROM Customers ORDER BY Country DESC;
    SELECT * FROM Customers ORDER BY Country, CustomerName;--here if country values are same then it orders by CustomerName
    SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;
   
//The SQL INSERT INTO Statement
*The INSERT INTO statement is used to insert new records in a table.
Eg: INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);--one way
    INSERT INTO table_name VALUES (value1, value2, value3, ...);---here columns are not mentioned and values are inserted according to the column number

Note:
*There will be autoincrement columns like IDs
*If some column values are not inserted against column names then those column fields take NULL values 

//SQL NULL Values
*A field with a NULL value is a field with no value.
*A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!
*NULL values are used to update or insert new record without adding any value
*IS NULL & IS NOT NULL is used to test the null values

Eg: SELECT column_names FROM table_name WHERE column_name IS NULL|IS NOT NULL;
    SELECT CustomerName, ContactName, Address FROM Customers WHERE Address IS NULL;
    
 //The SQL UPDATE Statement
 *The UPDATE statement is used to modify the existing records in a table.
 Eg: UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;
     UPDATE Customers SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;
 *Update keyword must be used with where class otherwise all records are updated
 
 //The SQL DELETE Statement
 *The DELETE statement is used to delete existing records in a table.
 *If we wont specify where class all records are deleted.
 Eg: DELETE FROM table_name WHERE condition;
     DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';
     DELETE FROM table_name;
     
//SQL TOP, LIMIT, FETCH FIRST or ROWNUM Clause
*The SELECT TOP clause is used to specify the number of records to return.
*It is used on large number

MS Access & SQL Server
Ex: SELECT TOP number|percent column_name(s) FROM table_name WHERE condition;
    SELECT TOP 3 * FROM Customers;
    
MYSQL
Ex: SELECT column_name(s) FROM table_name WHERE condition LIMIT number;
    SELECT * FROM Customers LIMIT 3;
    
Oracle
Ex: SELECT column_name(s) FROM table_name ORDER BY column_name(s) FETCH FIRST number ROWS ONLY;
    SELECT * FROM Customers FETCH FIRST 3 ROWS ONLY;
    
    
//The SQL MIN() and MAX() Functions
*The MIN() function returns the smallest value of the selected column.
Ex: SELECT MIN(column_name) FROM table_name WHERE condition;
    SELECT MIN(Price) AS SmallestPrice FROM Products;

*The MAX() function returns the largest value of the selected column.
Ex: SELECT MAX(column_name) FROM table_name WHERE condition;
    SELECT MAX(Price) AS LargestPrice FROM Products;
    
//The SQL COUNT(), AVG() and SUM() Functions
*The COUNT() function returns the number of rows that matches a specified criterion.
Note: NULL values are not counted.
Ex: SELECT COUNT(column_name) FROM table_name WHERE condition;
    SELECT COUNT(ProductID) FROM Products;

*The AVG() function returns the average value of a numeric column. 
Note: NULL values are ignored.
Ex: SELECT AVG(column_name) FROM table_name WHERE condition;
    SELECT AVG(Price) FROM Products;
    
*The SUM() function returns the total sum of a numeric column. 
Note: NULL values are ignored.
Ex: SELECT SUM(column_name) FROM table_name WHERE condition;
    SELECT SUM(Quantity) FROM OrderDetails;
    
//The SQL LIKE Operator    
*The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
*There are two wildcards often used in conjunction with the LIKE operator:
 -The percent sign (%) represents zero, one, or multiple characters
 -The underscore sign (_) represents one, single character
 *The percent sign and the underscore can also be used in combinations!
 Tip: You can also combine any number of conditions using AND or OR operators.
 
//LIKE Operator	Description
*WHERE CustomerName LIKE 'a%'	Finds any values that start with "a"
*WHERE CustomerName LIKE '%a'	Finds any values that end with "a"
*WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
*WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
*WHERE CustomerName LIKE 'a_%'	Finds any values that start with "a" and are at least 2 characters in length
*WHERE CustomerName LIKE 'a__%'	Finds any values that start with "a" and are at least 3 characters in length
*WHERE ContactName LIKE 'a%o'	Finds any values that start with "a" and ends with "o"
 
 Ex: SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern;
 
Note: MS Access uses an asterisk (*) instead of the percent sign (%), and a question mark (?) instead of the underscore (_).


//SQL Wildcard Characters
*A wildcard character is used to substitute one or more characters in a string.

Symbol	Description	Example for MS Server(Different for other database)
*	Represents zero or more characters	bl* finds bl, black, blue, and blob
?	Represents a single character	h?t finds hot, hat, and hit
[]	Represents any single character within the brackets	h[oa]t finds hot and hat, but not hit
!	Represents any character not in the brackets	h[!oa]t finds hit, but not hot and hat
-	Represents any single character within the specified range	c[a-b]t finds cat and cbt
#	Represents any single numeric character	2#5 finds 205, 215, 225, 235, 245, 255, 265, 275, 285, and 295

Ex: [characterlist & characterlist-]
SELECT * FROM Customers WHERE City LIKE '[bsp]%';
SELECT * FROM Customers WHERE City LIKE '[a-c]%';

Ex: [!characterlist]
SELECT * FROM Customers WHERE City LIKE '[!bsp]%';
SELECT * FROM Customers WHERE City NOT LIKE '[bsp]%';


//SQL IN Operator
*The IN operator allows you to specify multiple values in a WHERE clause.
*The IN operator is a shorthand for multiple OR conditions.

Ex: SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...);
    SELECT column_name(s) FROM table_name WHERE column_name IN (SELECT STATEMENT);
    SELECT * FROM Customers WHERE Country IN ('Germany', 'France', 'UK');
    SELECT * FROM Customers WHERE Country NOT IN ('Germany', 'France', 'UK');
    Double Query:
    SELECT * FROM Customers WHERE Country IN (SELECT Country FROM Suppliers);


//The SQL BETWEEN Operator
*The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
*The BETWEEN operator is inclusive: begin and end values are included.

Ex: SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;
    SELECT * FROM Products WHERE Price BETWEEN 10 AND 20;
    
*To display the products outside the range of the previous example, use NOT BETWEEN:
Ex: SELECT * FROM Products WHERE Price NOT BETWEEN 10 AND 20;

*BETWEEN with IN Example
SELECT * FROM Products WHERE Price BETWEEN 10 AND 20 AND CategoryID NOT IN (1,2,3);

*Between with text
SELECT * FROM Products WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni' ORDER BY ProductName;

*Between with date
SELECT * FROM Orders WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#;
SELECT * FROM Orders WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';

//SQL Aliases
*SQL aliases are used to give a table, or a column in a table, a temporary name.
*Aliases are often used to make column names more readable.
*An alias only exists for the duration of that query.
*An alias is created with the AS keyword.

Ex: SELECT column_name AS alias_name FROM table_name;
    SELECT CustomerID AS ID, CustomerName AS Customer FROM Customers;
    SELECT CustomerName AS Customer, ContactName AS [Contact Person] FROM Customers;--if alias name contain double name then use [] or ""
    SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address FROM Customers;--alias name for more than one column
    SELECT column_name(s) FROM table_name AS alias_name;--table name alias
    SELECT o.OrderID, o.OrderDate, c.CustomerName FROM Customers AS c, Orders AS o WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;
    
//SQL JOIN
*A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

**Different Types of SQL JOINs
Here are the different types of the JOINs in SQL:
*(INNER) JOIN: Returns records that have matching values in both tables
*LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
*RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
*FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table

Inner Join:
Ex : SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;
     SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName FROM ((Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID) 
     INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);--inner joined 3 tables orders,customers,shippers
  
Left Join:
Ex: SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name;
    SELECT Customers.CustomerName, Orders.OrderID FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID ORDER BY Customers.CustomerName;

Right Join:
Ex: SELECT column_name(s) FROM table1 RIGHT JOIN table2 ON table1.column_name = table2.column_name;

SQL FULL OUTER JOIN Keyword:
Ex: SELECT column_name(s) FROM table1 FULL OUTER JOIN table2 ON table1.column_name = table2.column_name WHERE condition;
    SELECT Customers.CustomerName, Orders.OrderID FROM Customers FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID ORDER BY Customers.CustomerName;
    
SQL Self Join
*A self join is a regular join, but the table is joined with itself. 
Ex: SELECT column_name(s) FROM table1 T1, table1 T2 WHERE condition;-- T1 & T2 are diff alias table names for same table

//The SQL UNION Operator
*The UNION operator is used to combine the result-set of two or more SELECT statements.
*Every SELECT statement within UNION must have the same number of columns
*The columns must also have similar data types
*The columns in every SELECT statement must also be in the same order
Ex: SELECT column_name(s) FROM table1 UNION SELECT column_name(s) FROM table2;
    SELECT City FROM Customers UNION 
    SELECT City FROM Suppliers ORDER BY City;
    SELECT City, Country FROM Customers WHERE Country='Germany' UNION
    SELECT City, Country FROM Suppliers WHERE Country='Germany' ORDER BY City;
    SELECT 'Customer' as type, ContactName, City, Country FROM Customers UNION SELECT 'Supplier', ContactName, City, Country FROM Suppliers

*The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:
Note: The column names in the result-set are usually equal to the column names in the first SELECT statement.

// SQL GROUP BY Statement
*The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".
*The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.
Ex: SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) ORDER BY column_name(s);
    SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC;
    SELECT Shippers.ShipperName,COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID GROUP BY ShipperName;

//SQL HAVING Clause
*The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.
Ex: SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) HAVING condition ORDER BY column_name(s);
    SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country HAVING COUNT(CustomerID) > 5;
    SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders 
    INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID WHERE LastName = 'Davolio' OR LastName = 'Fuller' 
    GROUP BY LastName HAVING COUNT(Orders.OrderID) > 25;
    
 //SQL EXISTS Operator
*The EXISTS operator is used to test for the existence of any record in a subquery.
*The EXISTS operator returns TRUE if the subquery returns one or more records.
Ex: SELECT column_name(s) FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);
    SELECT SupplierName FROM Suppliers WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);
    
//SQL ANY and ALL Operators
*The ANY and ALL operators allow you to perform a comparison between a single column value and a range of other values.
*ANY means that the condition will be true if the operation is true for any of the values in the range.
*Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).
Ex: Any
    SELECT column_name(s) FROM table_name WHERE column_name operator 
    ANY (SELECT column_name FROM table_name WHERE condition);
    
*ALL means that the condition will be true only if the operation is true for all values in the range. 
Ex: SELECT column_name(s) FROM table_name WHERE column_name operator ALL 
    (SELECT column_name FROM table_name WHERE condition);

//The SQL SELECT INTO Statement
*The SELECT INTO statement copies data from one table into a new table.
Ex: SELECT column1, column2, column3, ... INTO newtable [IN externaldb] FROM oldtable WHERE condition;
    SELECT * INTO CustomersBackup2017 FROM Customers;
    SELECT * INTO CustomersBackup2017 IN 'Backup.mdb' FROM Customers;-- IN clause to copy the table into a new table in another database:
    SELECT * INTO newtable FROM oldtable WHERE 1 = 0;--returns no data condition false
    
//SQL INSERT INTO SELECT Statement
*The INSERT INTO SELECT statement copies data from one table and inserts it into another table.
*The INSERT INTO SELECT statement requires that the data types in source and target tables match.
Note: The existing records in the target table are unaffected.
Ex: INSERT INTO table2 SELECT * FROM table1 WHERE condition;
    INSERT INTO table2 (column1, column2, column3, ...) SELECT column1, column2, column3, ... FROM table1 WHERE condition;
    INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;
    INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers WHERE Country='Germany';
 
//SQL CASE Statement
*The CASE statement goes through conditions and returns a value when the first condition is met (like an if-then-else statement).
*So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.
*If there is no ELSE part and no conditions are true, it returns NULL.
Ex: CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;

SELECT OrderID, Quantity,
CASE WHEN Quantity > 30 THEN 'The quantity is greater than 30'
WHEN Quantity = 30 THEN 'The quantity is 30'
ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;

SELECT CustomerName, City, Country
FROM Customers
ORDER BY
(CASE
    WHEN City IS NULL THEN Country
    ELSE City
END);


//SQL NULL Functions
*SQL IFNULL(), ISNULL(), COALESCE(), and NVL() Functions-- for different databases
Ex: SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))FROM Products;
